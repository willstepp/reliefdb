# The filters added to this controller will be run for all controllers in the application.
# Likewise will all the methods added be available for all controllers.
require 'localization'
require 'user_system'
require 'date_kit'

class ApplicationController < ActionController::Base
  # Pick a unique cookie name to distinguish our session data from others'
  session :session_key => '_reliefdb_session_id'
  include Localization
  include UserSystem

  helper :user
  helper :date
#  model :user
#  model :shelter
#  model :condition
#  model :item
#  model :category

  before_filter :login_required
  before_filter :log_auth

#----- new code below this line ---------------------------------------------------
  FACILITY_DEFAULTS =  {:state => "All",
                        :county => "All",
                        :region => "All",
                        :show_closed => "0",
                        :show_only_my => "0",
                        :show_regional => "0",
                        :types => Hash[*Shelter::FacilityType.levels.values.sort.collect{|ftp|[ftp,"1"]}.flatten],
                        :linesperpage => 50}
						
  CONDITION_DEFAULTS = {:urgency_levels => {"1"=>1,"2"=>1,"3"=>1,"4"=>1},
                        :avail_need => "Both",
                        :fac_include => "Selected",
                        :category => "All",
                        :item => "All"}
  
           
  def filter_set_defaults(type = nil)
    @searches = Search.where(:user_id => session['user'].id).map{|s| [s.save_name, s.id]} if session['user']
    
    filter = session[:filter]||{} 
    FACILITY_DEFAULTS.each{|k,v|filter[k] ||= v}
    if type == 'conditions'
      CONDITION_DEFAULTS.each{|k,v|filter[k] ||= v} 
    end
    session[:filter] = filter
  end

  def filter_set_all
    filter = session[:filter]||{}    
    FACILITY_DEFAULTS.each{|k,v|filter[k] = params[k] || v}
    CONDITION_DEFAULTS.each{|k,v|filter[k] = params[k] || v} if params[:controller] == 'conditions'
    flash[:filter_error] = nil
    if filter[:types].nil? then
      flash[:filter_error] = "You Must Select One or More Facility Types"
    end
    if params[:adv_search]
      if params[:search][:field].starts_with?("(Select")
        flash[:filter_error] = "Advanced Search: You Must Select A Column To Search"
        return
      end
      if params[:search][:condition].starts_with?("(Select")
        flash[:filter_error] = "Advanced Search: You Must Select A Condition"
        return
      end   
      filter[:fac_search] = params[:search]
    else
      filter[:fac_search] = nil
    end  
    session[:filter] = filter
  end
     
  def conditions_for_facility   
    if session[:filter][:show_only_my] == "1" && !session['user'].nil?
      @filter += (@filter.length > 0 ? ", " : "") + "Only My Facilities"
      addcondition("(shelters_users.shelter_id = shelters.id) AND (shelters_users.user_id = #{session['user'].id})")
      return
    end
    
    if session[:filter][:state] and session[:filter][:state] == "All"
#      @filter += (@filter.length > 0 ? ", " : "") + "State: All"     
      if (session[:filter][:show_regional] && session[:filter][:show_regional] == "0")
        addcondition("shelters.state != ''")
      else
        @filter += (@filter.length > 0 ? ", " : "") + "Regional Facilities"
      end
    else
      @filter += (@filter.length > 0 ? ", " : "") + "State: " + session[:filter][:state]      
      if session[:filter][:show_regional] && session[:filter][:show_regional] == "1"
        @filter += (@filter.length > 0 ? ", " : "") + "Regional Facilities"
        addcondition("(shelters.state = ? OR shelters.state = '')", session[:filter][:state])
      else
        addcondition("(shelters.state = ?)", session[:filter][:state])
      end
      if session[:filter][:county]
        if session[:filter][:county] == "All"
          @filter += (@filter.length > 0 ? ", " : "") + "County: All"
        else
          @filter += (@filter.length > 0 ? ", " : "") + "County: " + session[:filter][:county]
          addcondition("(shelters.parish = ?)", session[:filter][:county])
        end
      end      
    end
        
    if session[:filter][:show_closed] and session[:filter][:show_closed] == "1"      
      @filter += (@filter.length > 0 ? ", " : "") + "Closed Facilities"
    else
      addcondition("(shelters.status != 3 OR shelters.status IS NULL)")
    end

    #This doesn't seem to really work, but not dealing with it tonight.
    if session[:filter][:types].nil?
      flash[:filter_error] = "You Must Select One or More Facility Types"
    end
    #This fixes the bug where if you filter only on facility type, the clear filter and clear all links won't come up, and you have to go back and forth to clear it out.
    if Shelter::FacilityType.levels.length != session[:filter][:types].length
	@filter += (@filter.length > 0 ? ", " : "") + "Types: " + ((session[:filter][:types].keys).join(", "))
    end
    addcondition("(facility_type IN ('" + Shelter::FacilityType.levels.invert.values_at(*session[:filter][:types].keys).join("','") + "'))") if session[:filter][:types] && (Shelter::FacilityType.levels.length != session[:filter][:types].length)

    if session[:filter][:fac_search]
      @filter += (@filter.length > 0 ? ", " : "") + "#{session[:filter][:fac_search][:field]} #{session[:filter][:fac_search][:condition]} '#{session[:filter][:fac_search][:match]}'"
      case session[:filter][:fac_search][:field]
        when "Name"
          fld = "name"
        when "Organization"
          fld = "organization"
        when "County"
          fld = "parish"
        when "Main Phone"
          phone=session[:filter][:fac_search][:match].gsub(/[\ \.\(\)\-]/,'')
#          tail = session[:filter][:fac_search][:condition] != "Matches" ? "" : ".*"
          addcondition("shelters.main_phone ~ '.*#{phone[0..2]}.*#{phone[3..5]}.*#{phone[6..9]}.*'")
      end
      case session[:filter][:fac_search][:condition] 
        when "Begins With"
          addcondition("lower(shelters.#{fld}) LIKE  ?",session[:filter][:fac_search][:match].downcase + "%")
        when "Contains"
          addcondition("lower(shelters.#{fld}) LIKE  ?","%" + session[:filter][:fac_search][:match].downcase + "%") 
        when "Matches"        
          addcondition("lower(shelters.#{fld}) =  '#{session[:filter][:fac_search][:match].downcase}'")
      end  if session[:filter][:fac_search][:field] != "Main Phone"          
    end
  end
  
#----- new code above this line ---------------------------------------------------
  def log_auth
    if session['user']
      response.headers["X-Cat-Auth-User"] = session['user'].login
    end
  end

  # Copied from user_system, we need it public for partials to call if they link to an edit
  def store_location
    session['return-to'] = request.request_uri
  end
 
  PRIV_TABLE = {
    :read => {
      :map => [:shelters],
      :totals => [:shelters, :conditions, :items, :categories],
      :showcol => [:shelters, :conditions, :items, :categories, :loads],
      :hidecol => [:shelters, :conditions, :items, :categories, :loads],
      :list => [ :shelters, :conditions, :items, :categories, :loads, :stats, :facilities, :searches ], 
      :listall => [:conditions],
      :show => [ :shelters, :conditions, :items, :categories, :loads ], 
      :matches => [ :conditions ],
      :filter => [:facilities, :conditions],
      :search => [:facilities, :conditions],
      :filter_category => [:conditions],
      :sort => [:facilities, :conditions],
      :hide_col => [:facilities, :conditions],
      :show_col => [:facilities, :conditions],
      :options => [:facilities],
      :filter_set => [:facilities, :conditions],
      :new => [:searches],
      :post => [:searches],
      :expand => [:items],
    },
    :new_shelters => {
      :new => [ :shelters ],
      :create => [ :shelters ],
      :by_user => [ :stats ],
      :change_status => [ :loads ],
    },
    :read_sensitive => {
      :access_shelters => [:stats ],
    },
    :write => {
      :new => [ :shelters, :conditions, :items, :categories, :loads, :projects ],
      :create => [ :shelters, :conditions, :items, :categories, :loads, :projects ],
      :edit => [ :shelters, :conditions, :items, :categories, :loads, :projects ],
      :update => [ :shelters, :conditions, :items, :categories, :loads, :projects ],
      :destroy => [ :conditions, :loads, :projects ],
      :quickedit => [ :shelters ],
      :quickupdate => [ :shelters ],
      :by_user => [ :stats ],
      :change_status => [ :loads ],
      :task_delete => [:projects],
      :copy => [:projects],
      :list => [:projects],
      :show => [:projects],
      :update_positions =>[:projects],
      :task_add =>[:projects],
      :create_task =>[:projects],
      :printlist => [:facilities],
    },
    :admin => {
      :list => [ :resources, :faq_entries, :faq_categories, :admin ],
      :show => [ :resources, :faq_entries, :faq_categories ],
      :new => [ :resources, :faq_entries, :faq_categories ],
      :create => [ :resources, :faq_entries, :faq_categories ],
      :edit => [ :resources, :faq_entries, :faq_categories ],
      :update => [ :resources, :faq_entries, :faq_categories ],
      :destroy => [ :shelters, :items, :categories, :resources, :loads, :faq_entries, :faq_categories ],
      :calculate_locations => [ :shelters ],
      :up => [ :faq_entries ],
      :down => [ :faq_entries ],
      :admin_list => [:loads],
      :admin_email => [:admin],
      :admin => [:categories],
      :add_shelter => [:stats],
    }
  }

  def protect?(action)
    controller = params[:controller].to_sym
    action = action.to_sym

#    return true if controller == :searches   

    if (controller == :about) or (controller.to_s.split('/')[0] == 'quick') or (PRIV_TABLE[:read][action] and PRIV_TABLE[:read][action].include?(controller))       
      logger.info("User #{session['user'] ? session['user'].login : '(anonymous)'} authorized for #{controller}/#{action} from #{request.remote_ip} at #{Time.now.to_s}")
      return false
    end

    true
  end

  def authorize?(user)
    controller = params[:controller].to_sym
    action = params[:action].to_sym
    if is_authorized_for?(user, controller, action)
      logger.info("User #{user.login} authorized for #{controller}/#{action} from #{request.remote_ip} at #{Time.now.to_s}")
      return true
    else
      logger.info("User #{user.login} DENIED for #{controller}/#{action} from #{request.remote_ip} at #{Time.now.to_s}")
      return false
    end
  end

  def is_authorized_for?(user, controller, action)
    if controller == :user
      return true
    end

    PRIV_TABLE.each {|priv, perms|
      if user.send("priv_#{priv.to_s}".to_sym)
        if perms[action] and perms[action].include?(controller)
	     return true
	    end
      end
    }

    if controller == :shelters and [:edit, :update, :quickedit, :quickupdate].include?(action)
      if Shelter.find(params[:id]).users.include?(user)
        return true
      end
    end

    if controller == :conditions
      if [:new, :create].include?(action)
    	if Shelter.find(params[:shelter]).users.include?(user)
          return true
	    end
      elsif [:edit, :update].include?(action)
    	if Condition.find(params[:id]).shelter.users.include?(user)
	      return true
    	end
      end
    end

    if controller == :loads
      if [:new, :create].include?(action)
        if Shelter.find(params[:srcid]).users.include?(user)
          return true
        end
      elsif [:edit, :update, :destroy].include?(action)
        if Load.find(params[:id]).source.users.include?(user)
          return true
        end
      elsif [:accept].include?(action)
        if Load.find(params[:id]).allowed_next_statuses(user).include?(10)
          return true
        end
      end
    end

    flash['message'] = "Access denied. You are currently logged in as #{user.firstname} #{user.lastname}. If that is not your account, please log in again as the correct user. Otherwise, you have attempted to access a page which you are not permissioned for. If you got here by accident, just click your browser's back button to go back to where you were. If you're having trouble creating new facilities, please look at the <a href=\"/about/help\">help</a>. If you need new permissions, please E-mail <a href=\"mailto:#{$DBADMIN}\">#{$DBADMIN}</a>. We apologize for any inconvenience."
    
    store_location
    return false
  end

end
