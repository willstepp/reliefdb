class FacilitiesController < ApplicationController
  require 'fpdf'

  layout "reliefdb"
  helper :shelters
  
  def filter       
    flash.keep
    filter_set_defaults
    params[:filter_source] = params[:filter_source] || 'facilities'
    render :layout => "reliefdb"
  end
  
  def filter_set
    if params[:commit] == 'Load' || params[:commit]=='Go'
      begin
        srch = Search.find(params[:update_id])
      rescue
        flash[:notice] = "Either Your Request Was Invalid or That Search Has Been Removed"
        redirect_to :action => 'filter'
        return
      end
        session[:filter] = srch.save_data
        redirect_to :action => 'filter' if params[:commit]=='Load'
        redirect_to :action => 'list' if params[:commit]=='Go'
    else       
      filter_set_all
      if flash[:filter_error]
        flash[:notice] = flash[:filter_error]
        redirect_to :action => 'filter'      
      else
        redirect_to :action => 'list'
      end
    end
  end
  
  def search
    session[:filter][:state] = params[:state] || "All"
    render :partial => "county", :layout => false
  end 
  
  def list      
    if params[:preset]
      begin
        srch = Search.find(params[:preset])
      rescue
        flash[:notice] = "Either Your Request Was Invalid or That Search Has Been Removed"
        redirect_to :action => 'filter'
        return
      end
      session[:filter] = srch.save_data
    end
    session[:filter] = nil if params[:clear] == "true"
    filter_set_defaults

    @cond = [""]
    @filter = ""    

    session[:filter][:state] = params[:state] if params[:state]
    conditions_for_facility
    if flash[:filter_error]
      flash[:notice] = flash[:filter_error]
      redirect_to :action => 'filter'
      return
    end

    session[:filter][:fac_columns] = Facility.cols if session[:filter][:fac_columns].nil?
    session[:filter][:hidden] = [] if session[:filter][:hidden].nil?

    order = session[:filter][:fac_sort].collect{|c|Facility.col_for_sort[Facility.cols.index(c.gsub(/\ DESC|\ ASC/,''))] + ' ' + c[c.rindex(' ') + 1,c.length]}.join(",")  if session[:filter][:fac_sort]
    order = "shelters.name" if order.blank?
    params[:page] = 1 if params[:page].nil?

    session[:filter][:linesperpage] = params[:linesperpage] if params[:linesperpage]    
    session[:filter][:linesperpage] ||= 20
    session[:filter][:linesperpage] = 99999 if session[:filter][:linesperpage] == "All"
    @offset = (params[:page].to_i - 1) * session[:filter][:linesperpage].to_i 
    @records = Shelter.count(:joins => ((@cond[0].include? "shelters_users") ? ",shelters_users" : ""),
                            :conditions => @cond[0] == "" ? nil : @cond)         
    @pages = @records.divmod(session[:filter][:linesperpage].to_i)[0] + (@records.divmod(session[:filter][:linesperpage].to_i)[1] > 0 ? 1:0)

    @facilities = Shelter.find(:all,
                          :include => (:users if(@cond[0].include? "shelters_users")),
                          :conditions => @cond[0] == "" ? nil : @cond,
                          :order => order,
                          :limit => (params[:listtype] && params[:listtype] == "print") ? nil:session[:filter][:linesperpage],
                          :offset => (params[:listtype] && params[:listtype] == "print") ? nil: @offset)

    if params[:listtype] && params[:listtype] == "print" 
        send_data pdf(@facilities), :filename => 'facilities.pdf', :type => 'application/pdf', :disposition => 'inline'
    end

  end
  
  def sort
    session[:filter][:fac_sort] ||= []
    if params[:sort] == "clear"
      session[:filter][:fac_sort] = []
    else
      @found = false
      session[:filter][:fac_sort].collect! do |fld|
        if fld.starts_with?(params[:sort])
          @found = true
          params[:sort] + ' ' + params[:direction]
        else
          fld
        end       
      end
      session[:filter][:fac_sort] << params[:sort] + ' ' + params[:direction] if not @found
    end    
    redirect_to :action => "list"
  end 
  
  def hide_col
    session[:filter][:hidden] << params[:hide]
    session[:filter][:fac_columns].delete(params[:hide])
    redirect_to :action => "list"
  end
  
  def show_col
    if params[:show] == "all" 
      session[:filter][:hidden] = []
      session[:filter][:fac_columns] = Facility.cols     
    else
      session[:filter][:fac_columns] << params[:show]
      session[:filter][:hidden].delete(params[:show])
    end
    redirect_to :action => "list"
  end
end

def addcondition(newcond,newparam = nil)
  @cond[0] += (@cond[0].length > 0 ? " AND ":"") + newcond
  @cond << newparam if newparam    
end

def pdf(facilities)
  pdf=CATPDF.new
  pdf.AliasNbPages
  pdf.SetAutoPageBreak(true,30)
  facilities.each_with_index do |facility,idx|
    pdf.AddPage
    pdf.SetFont('Times', '', 10)
    pdf.SetOverflowName(facility.name)
    pdf.Cell(0,8,"Name of Facility:  " + facility.name,1,1,'C')

#    text += "Organization: " + facility.organization.strip  + "\n"
#    text += "State: " + facility.state + "\n"
#    text += "County: " + facility.parish + "\n"
#    text += "Zip: " + facility.zip.to_s + "\n"
#    text += "Town: " + facility.town + "\n"
#    text += "Mission: " + ifnull(facility.mission) + "\n\n" if not facility.mission.blank?
#    text += "Status: " + facility.status.to_s + "\n"
#    text += "Population Served: " + facility.current_population.to_s + "\n"
    text = ""
    text += "Website: " + ifnull(facility.website) + "\n\n" if not facility.website.blank?    
    text += "Operating Hours: " + facility.hours + "\n" if not facility.hours.blank?
    text += "Client Contact Name: " + ifnull(facility.client_contact_name)  + "\n" if not facility.client_contact_name.blank?
    text += "Client Contact Address: " + ifnull(facility.client_contact_address)  + "\n" if not facility.client_contact_address.blank?
    text += "Client Contact Phone: " + ifnull(facility.client_contact_phone) + "\n" if !facility.client_contact_phone.blank?
    text += "Client Contact EMail: " + ifnull(facility.client_contact_email) + "\n\n" if not facility.client_contact_email.blank?
    text += "Do You Currently Have A Waiting List? " + ifnull(facility.waiting_list_text)  + "\n" if not facility.waiting_list_text.blank?
    text += "Eligibility For Services: " + ifnull(facility.eligibility) + "\n\n" if not facility.eligibility.blank?
    text += "Is There A Fee For Service? " + ifnull(facility.is_fee_required) + "     Fee Amount: " +  
      ActionView::Helpers::NumberHelper.number_to_currency(facility.fee_amount.to_s) + "\n" 
    text += "Fee Includes: " + ifnull(facility.fee_is_for) + "\n" 
    text += "Explanation of Fee: " + ifnull(facility.fee_explanation) + "\n\n"
    text += "What Forms Of Payment Do You Accept? " + ifnull(facility.payment_forms)  + "\n" if not facility.payment_forms.blank?
    text += "Make Checks Payable To: " + ifnull(facility.make_payable_to) + "\n" 
    text += "Clients Must Bring: " + ifnull(facility.clients_must_bring)  + "\n" if not facility.clients_must_bring.blank?
    text += "This organization provides Temp/Permanent Service: " + facility.service_temp_perm  +
      ifnull("..." + ifnull(facility.temp_perm_explanation)) + "\n\n"

    y_save = pdf.GetY
    pdf.MultiCell(139,4,text,0,'L' )
    lp = pdf.GetY
    text = ""
    text += "Facility Type: " + facility.facility_type.to_s + "\n"
    text += "Areas Served: " + ifnull(facility.areas_served) + "\n"        
    text += "Main Phone: " + facility.main_phone + "\n" if not facility.main_phone.blank?
    pdf.SetY(y_save)
    pdf.SetX(150)
    pdf.MultiCell(50,4,text,0,'L')
    text = ""
    text += "Notes: " + ifnull(facility.notes) + "\n\n" if !facility.notes.blank?      
    pdf.SetY(lp) if pdf.GetY < lp
    pdf.MultiCell(0,4,text)
    pdf.Cell(0,4,"Services Offered:",'B',1)
    @services = facility.surpluses.find(:all,
                                        :joins => 'join items on items.id = conditions.item_id',
                                        :order => "catname(items.name)")
    text = ""
    @services.each do |service|
      text += service.item.name + "\n"
    end
    pdf.StartColumns(2,5)
    pdf.MultiCell(0,4,text)
#    pdf.MultiCellBlt(0,4,">",text)
    pdf.StopColumns
  end
  pdf.Output()
end

class CATPDF < FPDF
  def Header
    SetFont('Helvetica', 'B', 18)
    title = "Guide To Social Services, Hancock County "
    # Calculate width of title and position
    w = GetStringWidth(title) + 6
    SetX((210 - w) / 2)
  # Fill color = white
    SetFillColor(255, 255, 255)
  # Thickness of frame (1 mm)
    SetLineWidth(0.1)
  # Title
    title = title
    Cell(0, 9, title, 0, 1, 'C', 1)
    if @inpageoverflow
      SetFont('Helvetica', 'B', 12)
      Cell(0,4,@facility + " (Continued)",0,1)
    end
  # Line break
    Ln(5)
  end

  def SetOverflowName(name)
    @facility = name
  end

  def Footer
    # Position at 1.5 cm from bottom
  SetY(-30)
  # Helvetica italic 8
  SetFont('Helvetica', 'I', 8)
  # Page number
  MultiCell(0,4, "Brought to you with the help of:  FEMA, the American Red Cross, the Hancock County Food Pantry, Hope Haven Children's Homes, \n Lagniappe Presbyterian Church, Mississippi Center for Nonprofits, the Katrina Volunteers Hancock County Yahoo Group, \n the University of Pennsylvania's School of Social Policy & Practice, and the Citizen Action Team's Relief Database" , 'T', 'C')  
  Cell(0,4, 'Online Updates and online searching/sorting capabilites available at www.citizencommandcenter.org' , 0, 1, 'C')  
#  Cell(0,10,'Page 'PageNo()'/{nb}',0,0,'C')
  Cell(0,6,"Page #{PageNo()} / #{@AliasNbPages}",0,0,'C')
  end

#  def MultiCellBlt(w,h,bullet,txt,border=0,align='J',fill=0)
#    # get bullet width including margins
#    b_width = GetStringWidth(bullet) + @cMargin * 2
#    # save x
#    x = @x
#    # output bullet
#    self.Cell(b_width,h,bullet,0,0,fill)
#    # output text
#    self.MultiCell(w-b_width,h,txt,border,align,fill)
#    # restore x
#    @x = x
#  end
  
end

def ifnull(attribute)
   attribute.blank? ? "" : attribute
end